// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Groth16Verifier {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 18714184234394322895465956324981306430712516597752037078761055439035849804537;
    uint256 constant deltax2 = 16549772356648748985762534987403487689281402453861541756521602522410341867115;
    uint256 constant deltay1 = 20773229105725112977575373643689382855254164121518958244437805242555540162319;
    uint256 constant deltay2 = 21580610346976467925112119585094309737991404948569254216864449109437812535450;

    
    uint256 constant IC0x = 9506675845969574950475238785837561886218552044228389975854075930468350454251;
    uint256 constant IC0y = 16626282326336748090140706023749523231008662119702028447294938200261018544693;
    
    uint256 constant IC1x = 5145240455987679301601069768007508817107873648605878822041469328759685289680;
    uint256 constant IC1y = 21081857739458266199366389390487408383208665338016912654651446226030553600223;
    
    uint256 constant IC2x = 7426436036589805403210837212969260721454168656939052116013089646175246167636;
    uint256 constant IC2y = 13091347176440451440352781165807478313914227715961575117411640839042904910921;
    
    uint256 constant IC3x = 15746884359355586189113495958277546597662548199416745208781684439301132161422;
    uint256 constant IC3y = 4310407006202050957732906851202865778325022196194427013958986828651831213514;
    
    uint256 constant IC4x = 20240931153387027112389799297798068769577180257765349059209961275622801187806;
    uint256 constant IC4y = 16039063720547790480865164179612934419487801013652186321789138451201937530574;
    
    uint256 constant IC5x = 6729270112686448048581733293158669570977579694174690303986632411556174560262;
    uint256 constant IC5y = 9983456253373329408907357643395421072810722006914348088973366081309994211244;
    
    uint256 constant IC6x = 2029474062714198963214989116474099899815339239442626938490618385312770165167;
    uint256 constant IC6y = 10202018753407971984633759731850347919862118849883148319317780658406208164938;
    
    uint256 constant IC7x = 16094462435452245625993322196908502262996062196771087971754763932257039317682;
    uint256 constant IC7y = 15328839484862248552742114729263480939307512579567243075955436958267862205766;
    
    uint256 constant IC8x = 10514554092918165741795567837772584080209192586012003550890692252741858067933;
    uint256 constant IC8y = 13703069300472632830474302676195888293194552948582391996771035141581098315166;
    
    uint256 constant IC9x = 14691384502567071100335743226397634014008021108036220732968213077407963886322;
    uint256 constant IC9y = 3835226344333139866598698986089284509848147415885051451084750419851870663954;
    
    uint256 constant IC10x = 967762553054980931153941849732482646278663214407421015411745581031838332224;
    uint256 constant IC10y = 20469755008424917290257913348252398927569650287190258984572189083793857543071;
    
    uint256 constant IC11x = 16247857210272680384192583315564763568277567871019918825535415199710717637992;
    uint256 constant IC11y = 20550047043887326093166694387148729471331314542374527457146371797142948968443;
    
    uint256 constant IC12x = 6041548422099867421468807770294955298970392510723506705165065900626184258573;
    uint256 constant IC12y = 739023020653447342774722027904622403670674425110920912262486732165544577652;
    
    uint256 constant IC13x = 1433365396710530999870734070487050693013216495066938661819014463420754986232;
    uint256 constant IC13y = 20752731176174612660176717404846406305201693258216056630130094674400841181298;
    
    uint256 constant IC14x = 19258188533687537884706327958292488583031720259676534610826200367432820821345;
    uint256 constant IC14y = 4272909970631496814400688849892139516770081487737125968744522313971549441883;
    
    uint256 constant IC15x = 8688770471667890845207903701790560521456017717281238939877716786020632050954;
    uint256 constant IC15y = 15853820267043113084748273629134732053004264318257289148801726105292183882099;
    
    uint256 constant IC16x = 6702346888011541625823450897597956434876283140252534065443954817907279267263;
    uint256 constant IC16y = 5493243817615694729554548931376921172651486936279070890862811741450885676951;
    
    uint256 constant IC17x = 21486265949191441442849489032415048789400127715477301896063154966357396495197;
    uint256 constant IC17y = 15546686771972092389142571675309314512023332848508313474816750857613851751781;
    
    uint256 constant IC18x = 17618182545847109304896021226956692321808422197171067467477790844481811637233;
    uint256 constant IC18y = 5072503652244695868959369779329856583214707490362406810813968082703389833517;
    
    uint256 constant IC19x = 4396614561550974495155161539380836456667056711228422656558144609309646159450;
    uint256 constant IC19y = 2923303245258201601460235215307895770434524099784178045701412654320249387900;
    
    uint256 constant IC20x = 16432239442761040829823439335873221817982496806287110864306487219582424981888;
    uint256 constant IC20y = 12053076636963885746404127313896358319821683893398097495412474060390162258731;
    
    uint256 constant IC21x = 7794276702860141640446933892695290917468371784509130699726874859415690446573;
    uint256 constant IC21y = 5021438791507011891625739691803848223428669403307965917640050066677097936319;
    
    uint256 constant IC22x = 3701829400048253707616626914332732967593691469677235092963504502300929461843;
    uint256 constant IC22y = 6656667131563440241496141702528902525432215486666045309330345651815175812692;
    
    uint256 constant IC23x = 18015125151109786692571754271268156553615239925894072077220732583137992422723;
    uint256 constant IC23y = 9169016483992570229607154656438753113203556153112239812277026864729183690188;
    
    uint256 constant IC24x = 16000336637737672505630317010665480026925971158031162489247153654488474092951;
    uint256 constant IC24y = 2530152509985775291388443432521437150866194467013567749799571482656994897343;
    
    uint256 constant IC25x = 1549611684302076534257007618292920115165380703933845654248700882047862309331;
    uint256 constant IC25y = 16522875046809864975658635667940790974018099511535008720622464677496008857272;
    
    uint256 constant IC26x = 21880892237806223024489518873221639824998012260710430341214965676709430794067;
    uint256 constant IC26y = 18290356767142286038886841214721606167404117752980957222668862405140896932090;
    
    uint256 constant IC27x = 4969823905750219385544290626644372935246815017000503539117283274939454941650;
    uint256 constant IC27y = 18840965932857838355463225975474332067487353679605883027979303710190817011422;
    
    uint256 constant IC28x = 4142542097031980141643470260455778395771397716390278573827832923411545815612;
    uint256 constant IC28y = 17025952815591034772501926160828024375191659735084755934598311177857015039811;
    
    uint256 constant IC29x = 18235128238336944705765267997690920422522402086270254647781608605615440963175;
    uint256 constant IC29y = 8053186095902096532671659727665565026458668925236680481167924125134834085894;
    
    uint256 constant IC30x = 12459453300453978351052028585042218895647687774462311638332279332490089285085;
    uint256 constant IC30y = 9728886566804447843943505972214906525045831234059779589881919503027755477493;
    
    uint256 constant IC31x = 653163880332994177711108538211096873238684617859637927529763172139139190468;
    uint256 constant IC31y = 5864597915927947683894716579218304593718328555954519038963345968264304556687;
    
    uint256 constant IC32x = 10102644529200734935160357607600528939493962704006666071837273572566004592099;
    uint256 constant IC32y = 1403923022532870852624286226381924306943494342367451692804252872307313338384;
    
    uint256 constant IC33x = 16211008293477584657768818496722995486332030168411174588294616355999006991579;
    uint256 constant IC33y = 1361573713296085088205135077789443283954081200834517114414285164902950710735;
    
    uint256 constant IC34x = 11770764341824285591261026679651073868206978776677101775591688523420252989967;
    uint256 constant IC34y = 18715948430960058734625309887079996304497506633878807027505893456654466989350;
    
    uint256 constant IC35x = 10852394472411059781666762800898406406187972592572579518744315727542396851530;
    uint256 constant IC35y = 9599995913309022371980148384410933018716230240105873958383022746397026870915;
    
    uint256 constant IC36x = 128043269291114531186955353660435124076302155369179232127966144116983314126;
    uint256 constant IC36y = 14519037822344914304098112765248678106992986461705703564709167301893548824298;
    
    uint256 constant IC37x = 9352034190652931273682854511415323706354091465641476299089635674669201093978;
    uint256 constant IC37y = 15754713751408295815485795666898407529786319483439465160443390951251989616720;
    
    uint256 constant IC38x = 18186534517977627626365866260270924904801091876684319166121184178877006239765;
    uint256 constant IC38y = 135899158261041114688943510435139360909201100568262003294265222501269914233;
    
    uint256 constant IC39x = 9630560774135624089490668959024625530690991955141717106119258330780780695909;
    uint256 constant IC39y = 13851981471623915370449437351990456236266933216238827581389549417334476605003;
    
    uint256 constant IC40x = 18154496772534996580865159253366416420286260647838688951517892171414374789494;
    uint256 constant IC40y = 9157097249222145943777448375484541121742914448068652585308678580228834919161;
    
    uint256 constant IC41x = 13173297588188365104693777459406739400346096439693778463743361164700588852256;
    uint256 constant IC41y = 3070678639794491618000743989505535773640058757377087147608553747980672274614;
    
    uint256 constant IC42x = 4237666895086586942786614692653095881601609740805259862562639800369247541007;
    uint256 constant IC42y = 13460630912930494926491504962752933377103104670049094589134621456136475598713;
    
    uint256 constant IC43x = 13583894640895806746519041528566064976306292407683740602846181309630494643272;
    uint256 constant IC43y = 11744113231764013555836625321196960100262317510970263025680899499760711482792;
    
    uint256 constant IC44x = 1020641769649927219495315112346517691243277855932819568058307047632718430232;
    uint256 constant IC44y = 17224976562184678242049079680586425698877086694681995120010717866825718845053;
    
    uint256 constant IC45x = 21726463869547381166256795862683036164968362064043952513213511428902284884401;
    uint256 constant IC45y = 5121291426270288707018700003733275068650883514734098760354460681341720819717;
    
    uint256 constant IC46x = 12786819709847568109268730600747180262489608387883474491161737967468692934101;
    uint256 constant IC46y = 7076932974022136180696445381986053046821012832109575587945943873499606340732;
    
    uint256 constant IC47x = 16328840677394602784472225360308598142295033750435662491447327436099738306784;
    uint256 constant IC47y = 11336417361525457717621114226757283286019386609584016028761586816878378812004;
    
    uint256 constant IC48x = 5906859325597519279187727729853746290157644426180766128306635036291762273862;
    uint256 constant IC48y = 21123892995639091767916047569013345541899402316353599277849839360278353120468;
    
    uint256 constant IC49x = 12670499790915095852225142159458294698258430755974647051524502569697892083068;
    uint256 constant IC49y = 8804006261149385041639208064286339642958911797142531600572024984408098804400;
    
    uint256 constant IC50x = 15128389113297297768200963486636872885245303702533688442035291807022449169101;
    uint256 constant IC50y = 6248556636461114472075205241402433539932281891573395174222255225309718441389;
    
    uint256 constant IC51x = 2665234814776589934103162532887240913026143227311535273197786708012606414032;
    uint256 constant IC51y = 11722121344752105733314648060351179987745563049884282406023164481200584760895;
    
    uint256 constant IC52x = 4744881301521243485082934987641462798508718161691378427781768657607359014342;
    uint256 constant IC52y = 15627061761566297514562875476214105152177474455173058349067590325263492236823;
    
    uint256 constant IC53x = 10875998979507069280891072207598212735045486662732175849998682762801259272735;
    uint256 constant IC53y = 9928568084924429667838868684243952594593532410504865442061937844334178633540;
    
    uint256 constant IC54x = 10028206081760222008205614477479375611907062414049541351647664081641065772162;
    uint256 constant IC54y = 331208712801267362462292772272847494581940746109599899285642056404585012902;
    
    uint256 constant IC55x = 4195993910139004029035927516253077399669067699701315238810212524057595850686;
    uint256 constant IC55y = 2190986788256310875482738179577279806514234125907590128175907287704241684468;
    
    uint256 constant IC56x = 4927667965915688476153698936606512846122382032511254824948793289771509467445;
    uint256 constant IC56y = 8303490929828012479180587054776493416584343143940180849906884823287356904111;
    
    uint256 constant IC57x = 17064578450216518526955662267270975279365084279096788457111387708894751088499;
    uint256 constant IC57y = 21620734418179632339593406914707904448063073543756877590766595444389817652882;
    
    uint256 constant IC58x = 18715709597772859657139118281664555079890289332318793691231998515905392357192;
    uint256 constant IC58y = 16539285140483628860900719527991234072500267610184750420607154599108857149159;
    
    uint256 constant IC59x = 6566832060637793938900654864803084881714828295501532812649632805353174176348;
    uint256 constant IC59y = 18730690527859997339772986669931930603307124701008492836744427098738629627575;
    
    uint256 constant IC60x = 8309779959338343608786007860416261798254321568812736097466718237477385123582;
    uint256 constant IC60y = 15742685139974244336835814741594493998628510655632449431904719843772667626196;
    
    uint256 constant IC61x = 4934551683228277350776923727682917077398323847690264301324051473387002792501;
    uint256 constant IC61y = 14686291184584669153392980026380101541652253018850437188313723413604589260688;
    
    uint256 constant IC62x = 18033566636963525562860835234777779441703787267620597111750489707647651363870;
    uint256 constant IC62y = 10225528428784468043255280475670970257501394604385990539721664817437342096969;
    
    uint256 constant IC63x = 10152283471095432284770710924203890573732659553992753457711500974062269522062;
    uint256 constant IC63y = 3035944957595485006064724898305180032386392970389168513048029445449228731689;
    
    uint256 constant IC64x = 9797314025768390881025547238068359881056614681213841116878275795712978447278;
    uint256 constant IC64y = 15176656778439199304879636951346980660703094773174343056985230049345469795649;
    
    uint256 constant IC65x = 7171395739372930575487221323395544573465404063193733674570439471640393762125;
    uint256 constant IC65y = 9139957739637181755178639442479139528446463116018892272708311429877053889856;
    
    uint256 constant IC66x = 12487513307018460110375663356156074715957553503865276063346917619834769320753;
    uint256 constant IC66y = 21146723188422662795904952960085549467804555330700867921440485824978291436310;
    
    uint256 constant IC67x = 7449742929376369739093437492997675075797380155992249671365415660337886298371;
    uint256 constant IC67y = 4688255443652531785738822881555892798533286637006456964376072409866213209666;
    
    uint256 constant IC68x = 4111000837609724927833752334359223761626075008567374820271125177030833545295;
    uint256 constant IC68y = 21327768533572858510898565004228463155904150782164089481073817538837110559392;
    
    uint256 constant IC69x = 2404388248280959570013564709347845873663698780679757379358877140110327801078;
    uint256 constant IC69y = 15805618840241784481335520906299540657048608104817453037908938729279172443298;
    
    uint256 constant IC70x = 17356508158271931324889791558417165200153755638166913252008172926115725672729;
    uint256 constant IC70y = 16503332985024187092292655622826641235167191162742156890118826732615662218673;
    
    uint256 constant IC71x = 15303422549266289382638922797162516698345634507340118767977474943084716038483;
    uint256 constant IC71y = 3670955761813017029794159939008601037725684014674612353848130618923301494565;
    
    uint256 constant IC72x = 14671986574138401405042198197851235366270857507861591980039611687007773693916;
    uint256 constant IC72y = 7030093883877484246685148139443081555506968790255086555462192998087467871464;
    
    uint256 constant IC73x = 15766055883095267520788284824770528189788370943143068771128151399200681079904;
    uint256 constant IC73y = 4145054203184738181810720280149808971502692417851838550808734660051963044634;
    
    uint256 constant IC74x = 2710546764053649313413744234829417041420769312752057530845351391336253269317;
    uint256 constant IC74y = 3835579799543661375857044511236034502390394749162774953394430621066382220993;
    
    uint256 constant IC75x = 7579400883574140020260201736993541275687110289951528738890109179644996116445;
    uint256 constant IC75y = 2234744016591577332457140776616123511038078546427910473496363235979466994144;
    
    uint256 constant IC76x = 11686122697516219334203617462518032085383420068853156661255307201698922981713;
    uint256 constant IC76y = 21287754393231012716439015257095505485522853995972049941349440346054679223374;
    
    uint256 constant IC77x = 5954339557708080277438672827782525380429522341641496802815945997392273586870;
    uint256 constant IC77y = 16831504057817694282538084554339249771772532572338515823523249549079515334666;
    
    uint256 constant IC78x = 19156042940561097282105363715763000385493380363465344559796435023663505039875;
    uint256 constant IC78y = 4200372782672045613898521175590240086330334618560783395254819864150321778741;
    
    uint256 constant IC79x = 18190070192334382372256423322862305550427981026825495391421289435339850632180;
    uint256 constant IC79y = 1565987926661460787974139968068509889831227204814296244398981253308598988335;
    
    uint256 constant IC80x = 19682342683327306433936017973713353568698731652368279944175585132224506997952;
    uint256 constant IC80y = 9104743084916367160614735579748149413397906080905540527102816140801756133914;
    
    uint256 constant IC81x = 12817250029849218692041473381928206702231108720037948105783540787620639404974;
    uint256 constant IC81y = 10644725810518703724681742699328614609017054657744323322763385117838793560522;
    
    uint256 constant IC82x = 17809640829898229247196898560855706945648029114894600993504642146814768232413;
    uint256 constant IC82y = 5184310394736866439495583329998054117730624441019619585359826536242100377240;
    
    uint256 constant IC83x = 6335463767464297470226053116024820069282913218266698957462529185143263747396;
    uint256 constant IC83y = 10368478838225927005043239298097479188457703364770305379348582763255607647112;
    
    uint256 constant IC84x = 13469585941711854803571104116987012494592101040953208445057355297143530514372;
    uint256 constant IC84y = 15691459750747337580502708658435889888965216061171312614494071820378520591866;
    
    uint256 constant IC85x = 14760633796897155096478520718990643982923252193205679070456433942479367174298;
    uint256 constant IC85y = 17626025002226177844911775013090352816151052730744572671663038068091605817792;
    
    uint256 constant IC86x = 12600655564011238868598622059004545905175191881925966750136223256550115309683;
    uint256 constant IC86y = 21474438367020974146464912763950041969087875866176839639832051185558767870347;
    
    uint256 constant IC87x = 12324633407328851486288489453895467838810240263901763203421903791758206494343;
    uint256 constant IC87y = 4235279867413821306620310231042952019733541371247642095302958115713429532160;
    
    uint256 constant IC88x = 16440542350842713913282396462366307591518843446296224054254657051584628050305;
    uint256 constant IC88y = 11819019507963702953251627206151714793366369934563667550514267371629117766171;
    
    uint256 constant IC89x = 16672647795401545728690056083735157718066711835727661946521301221172391525650;
    uint256 constant IC89y = 3556033498746192107001139871754940385884629830819571772972498656842572106385;
    
    uint256 constant IC90x = 17442373232551834152211548440093604199261624552356412884405529065191832738082;
    uint256 constant IC90y = 2363123457253189352688402124091385599214979847084688823469450197693491565278;
    
    uint256 constant IC91x = 14022930908346096588896762521578441198817115428976492451010601261953760794675;
    uint256 constant IC91y = 6929114492100653946154751561063164665333204905542774467614539158739943974693;
    
    uint256 constant IC92x = 19331098114580303497220734962580887116429066530406807356074101710434355357820;
    uint256 constant IC92y = 8435981804092280165310575559753697008025204247093362400180908183984121323630;
    
    uint256 constant IC93x = 16899032512050321790129839609450936667696127255669204766048860600347894133090;
    uint256 constant IC93y = 18515119104454458653716534985119172476100496644492333559979125854571892090428;
    
    uint256 constant IC94x = 2839711276270768853541501923324363112720402084271443102142773209198552178505;
    uint256 constant IC94y = 19866856900796864097111665182027385576125022188886026028242145468278393212932;
    
    uint256 constant IC95x = 10993161879915451875007807860983681427325651365447448795385316642459554324106;
    uint256 constant IC95y = 12995638558110736386352851068773314020057406966153860044237080387689783685569;
    
    uint256 constant IC96x = 20132995000717694406107191057645314626263764775156329720163095282486908390703;
    uint256 constant IC96y = 5476210374056545713450585015649962471134495106580300676827518301100479204204;
    
    uint256 constant IC97x = 13557233931275743655524984855491869540388723644855722035302053963535035972929;
    uint256 constant IC97y = 15017408900843958999820870084015690229238857721774617246414884128409881234698;
    
    uint256 constant IC98x = 4728158766287695336744377947497368280650984155665768504758146362980293230653;
    uint256 constant IC98y = 5832652519893707168850766868665834543570359874338624682642330960296527011170;
    
    uint256 constant IC99x = 12986840193527397659945866309180001792256351521591589422259160483956529238368;
    uint256 constant IC99y = 552580048368243030866906460055489983624911463694174887667516037080841405442;
    
    uint256 constant IC100x = 15001931078104180012532535736177319832435362647359514040350466847102273993653;
    uint256 constant IC100y = 12161796072543553273690471188690999697510190525067763832181443275788105094173;
    
    uint256 constant IC101x = 6846861173914395201107570804312349738235497829500858064375426418617736827673;
    uint256 constant IC101y = 2345390531724253918079731804418437763641803132279729527538795069055814425936;
    
    uint256 constant IC102x = 18930855673730987416710950590315943571330012974977522145080987332682951042695;
    uint256 constant IC102y = 11150909038109031314207946268573931412698428411258816678836934935024874659513;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[102] calldata _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, q)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                
                g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))
                
                g1_mulAccC(_pVk, IC102x, IC102y, calldataload(add(pubSignals, 3232)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            
            checkField(calldataload(add(_pubSignals, 3232)))
            
            checkField(calldataload(add(_pubSignals, 3264)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }
